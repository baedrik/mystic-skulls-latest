{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteAnswer",
  "description": "Responses from handle functions",
  "oneOf": [
    {
      "description": "response from adding or deleting potion images",
      "type": "object",
      "required": [
        "potion_images"
      ],
      "properties": {
        "potion_images": {
          "type": "object",
          "required": [
            "unassigned_images"
          ],
          "properties": {
            "unassigned_images": {
              "description": "total count of unassigned potion images",
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from creating a viewing key",
      "type": "object",
      "required": [
        "viewing_key"
      ],
      "properties": {
        "viewing_key": {
          "type": "object",
          "required": [
            "key"
          ],
          "properties": {
            "key": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from adding/removing admins",
      "type": "object",
      "required": [
        "admins_list"
      ],
      "properties": {
        "admins_list": {
          "type": "object",
          "required": [
            "admins"
          ],
          "properties": {
            "admins": {
              "description": "current admins",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from rewinding a skull image",
      "type": "object",
      "required": [
        "rewind"
      ],
      "properties": {
        "rewind": {
          "type": "object",
          "required": [
            "categories_rewound"
          ],
          "properties": {
            "categories_rewound": {
              "description": "the categories that were reverted",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from adding ingredients or updating commonalities",
      "type": "object",
      "required": [
        "ingredients"
      ],
      "properties": {
        "ingredients": {
          "type": "object",
          "required": [
            "ingredients"
          ],
          "properties": {
            "ingredients": {
              "description": "all known ingredients",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IngredientCommonality"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from creating named sets of ingredients for staking tables",
      "type": "object",
      "required": [
        "define_ingredient_sets"
      ],
      "properties": {
        "define_ingredient_sets": {
          "type": "object",
          "required": [
            "count"
          ],
          "properties": {
            "count": {
              "description": "number of ingredient sets",
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from creating staking tables for specified skull materials",
      "type": "object",
      "required": [
        "set_staking_tables"
      ],
      "properties": {
        "set_staking_tables": {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from setting halt status for staking, crating, and/or alchemy",
      "type": "object",
      "required": [
        "set_halt_status"
      ],
      "properties": {
        "set_halt_status": {
          "type": "object",
          "required": [
            "alchemy_is_halted",
            "crating_is_halted",
            "staking_is_halted"
          ],
          "properties": {
            "alchemy_is_halted": {
              "description": "true if alchemy is halted",
              "type": "boolean"
            },
            "crating_is_halted": {
              "description": "true if crating is halted",
              "type": "boolean"
            },
            "staking_is_halted": {
              "description": "true if staking is halted",
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from setting the crate nft base metadata",
      "type": "object",
      "required": [
        "set_crate_metadata"
      ],
      "properties": {
        "set_crate_metadata": {
          "type": "object",
          "required": [
            "public_metadata"
          ],
          "properties": {
            "public_metadata": {
              "$ref": "#/definitions/Metadata"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from setting the potion nft base metadata",
      "type": "object",
      "required": [
        "set_potion_metadata"
      ],
      "properties": {
        "set_potion_metadata": {
          "type": "object",
          "required": [
            "public_metadata"
          ],
          "properties": {
            "public_metadata": {
              "$ref": "#/definitions/Metadata"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from removing ingredients from a user's inventory to mint an nft containing them",
      "type": "object",
      "required": [
        "crate_ingredients"
      ],
      "properties": {
        "crate_ingredients": {
          "type": "object",
          "required": [
            "updated_inventory"
          ],
          "properties": {
            "updated_inventory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IngredientQty"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from claiming or setting the staking list",
      "type": "object",
      "required": [
        "stake_info"
      ],
      "properties": {
        "stake_info": {
          "type": "object",
          "required": [
            "charge_infos",
            "rewards"
          ],
          "properties": {
            "charge_infos": {
              "description": "charge info of the skulls currently staking",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChargeInfo"
              }
            },
            "rewards": {
              "description": "ingredients rewarded in this tx",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IngredientQty"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from setting charging time for staking",
      "type": "object",
      "required": [
        "set_charge_time"
      ],
      "properties": {
        "set_charge_time": {
          "type": "object",
          "required": [
            "charge_time"
          ],
          "properties": {
            "charge_time": {
              "description": "number of seconds to earn a staking charge (604800 for prod)",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response to setting addresses and code hashes for used contracts",
      "type": "object",
      "required": [
        "set_contract_infos"
      ],
      "properties": {
        "set_contract_infos": {
          "type": "object",
          "required": [
            "crate_contracts",
            "potion_contracts",
            "skulls_contract",
            "svg_server"
          ],
          "properties": {
            "crate_contracts": {
              "description": "crate contracts",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractInfo"
              }
            },
            "potion_contracts": {
              "description": "potion contracts",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractInfo"
              }
            },
            "skulls_contract": {
              "description": "code hash and address of the skulls contract",
              "allOf": [
                {
                  "$ref": "#/definitions/ContractInfo"
                }
              ]
            },
            "svg_server": {
              "description": "code hash and address of the svg server",
              "allOf": [
                {
                  "$ref": "#/definitions/ContractInfo"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from retrieving category and variant names and indices from the svg server of a specified category",
      "type": "object",
      "required": [
        "get_layer_names"
      ],
      "properties": {
        "get_layer_names": {
          "type": "object",
          "required": [
            "category_idx",
            "category_name",
            "variants"
          ],
          "properties": {
            "category_idx": {
              "description": "category index specified in the query",
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "category_name": {
              "description": "name of the category",
              "type": "string"
            },
            "variants": {
              "description": "variants of this category",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariantIdxName"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from retrieving dependencies and skipped categories from the svg server",
      "type": "object",
      "required": [
        "get_dependencies"
      ],
      "properties": {
        "get_dependencies": {
          "type": "object",
          "required": [
            "nones",
            "skip"
          ],
          "properties": {
            "nones": {
              "description": "None indices",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "skip": {
              "description": "categories that are skipped when rolling",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from disabling/enabling potions",
      "type": "object",
      "required": [
        "disabled_potions"
      ],
      "properties": {
        "disabled_potions": {
          "type": "object",
          "required": [
            "disabled_potions"
          ],
          "properties": {
            "disabled_potions": {
              "description": "currently disabled potions",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from adding potion name keywords",
      "type": "object",
      "required": [
        "add_name_keywords"
      ],
      "properties": {
        "add_name_keywords": {
          "type": "object",
          "required": [
            "first",
            "fourth",
            "second",
            "third"
          ],
          "properties": {
            "first": {
              "description": "keywords for the first position",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "fourth": {
              "description": "keywords for the fourth position",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "second": {
              "description": "keywords for the second position",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "third": {
              "description": "keywords for the third position",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from adding potion definitions",
      "type": "object",
      "required": [
        "define_potions"
      ],
      "properties": {
        "define_potions": {
          "type": "object",
          "required": [
            "potion_count",
            "potions_added"
          ],
          "properties": {
            "potion_count": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "potions_added": {
              "description": "number of potions added",
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from trying to brew a potion",
      "type": "object",
      "required": [
        "brew_potion"
      ],
      "properties": {
        "brew_potion": {
          "type": "object",
          "required": [
            "number_correct"
          ],
          "properties": {
            "number_correct": {
              "description": "largest number of correct recipe positions for all potions of the attempted size",
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "potion_name": {
              "description": "if successful, the name of the potion created",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from overriding category representative potions for building potion weights for addition and full rerolls",
      "type": "object",
      "required": [
        "override_category_rep"
      ],
      "properties": {
        "override_category_rep": {
          "type": "object",
          "required": [
            "build_list"
          ],
          "properties": {
            "build_list": {
              "description": "list of potion indices used for additionn and full rerolls",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "response from revoking a permit",
      "type": "object",
      "required": [
        "revoke_permit"
      ],
      "properties": {
        "revoke_permit": {
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "status": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "ChargeInfo": {
      "description": "a skull's token id and info about its accrued charges",
      "type": "object",
      "required": [
        "charge_start",
        "charges",
        "token_id"
      ],
      "properties": {
        "charge_start": {
          "description": "timestamp for beginning of unclaimed charge",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "charges": {
          "description": "whole number of charges accrued since charge_start (game cap at 4)",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "token_id": {
          "description": "token id fo the skull",
          "type": "string"
        }
      }
    },
    "ContractInfo": {
      "description": "code hash and address of a secret contract",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "description": "contract's address",
          "type": "string"
        },
        "code_hash": {
          "description": "contract's code hash string",
          "type": "string"
        }
      }
    },
    "Extension": {
      "description": "metadata extension You can add any metadata fields you need here.  These fields are based on https://docs.opensea.io/docs/metadata-standards and are the metadata fields that Stashh uses for robust NFT display.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
      "type": "object",
      "properties": {
        "attributes": {
          "description": "item attributes",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Trait"
          }
        },
        "description": {
          "description": "item description",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "url to the image",
          "type": [
            "string",
            "null"
          ]
        },
        "image_data": {
          "description": "raw SVG image data (not recommended). Only use this if you're not including the image parameter",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "name of the item",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "IngredientCommonality": {
      "description": "an ingredient and its commonality score",
      "type": "object",
      "required": [
        "commonality",
        "ingredient"
      ],
      "properties": {
        "commonality": {
          "description": "commonality score of this ingredient to use during recipe generation",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "ingredient": {
          "description": "name of the ingredient",
          "type": "string"
        }
      }
    },
    "IngredientQty": {
      "description": "an ingredient and its quantity",
      "type": "object",
      "required": [
        "ingredient",
        "quantity"
      ],
      "properties": {
        "ingredient": {
          "description": "name of the ingredient",
          "type": "string"
        },
        "quantity": {
          "description": "quantity of this ingredient",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "Metadata": {
      "description": "token metadata",
      "type": "object",
      "required": [
        "extension"
      ],
      "properties": {
        "extension": {
          "description": "on-chain metadata",
          "allOf": [
            {
              "$ref": "#/definitions/Extension"
            }
          ]
        }
      }
    },
    "Trait": {
      "description": "attribute trait",
      "type": "object",
      "required": [
        "trait_type",
        "value"
      ],
      "properties": {
        "trait_type": {
          "description": "name of the trait",
          "type": "string"
        },
        "value": {
          "description": "trait value",
          "type": "string"
        }
      }
    },
    "VariantIdxName": {
      "description": "a variant's index and display name",
      "type": "object",
      "required": [
        "idx",
        "name"
      ],
      "properties": {
        "idx": {
          "description": "index of the variant",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "name": {
          "description": "name of the variant",
          "type": "string"
        }
      }
    }
  }
}
